import { useState, useEffect, useRef } from "react";
import toast, { Toaster } from "react-hot-toast";
import { DayPicker } from "react-day-picker";
import "react-day-picker/dist/style.css";
import { X } from "lucide-react";
import { QRCodeCanvas } from "qrcode.react";

/**
 * OrderForm.js
 * Kompletn√≠ formul√°≈ô objedn√°vky s validacemi a QR modalem.
 *
 * D≈Øle≈æit√©:
 * - Pos√≠l√° datum ve form√°tu DD.MM.YYYY (server oƒçek√°v√° tento form√°t a p≈ôev√°d√≠ ho do ISO).
 * - Pokud je m√≠sto "Dematic Ostrov u St≈ô√≠bra 65", kalend√°≈ô blokuje v√≠kendy.
 * - Dne≈°n√≠ a minul√© dny jsou v≈ædy zablokovan√©.
 * - Po √∫spƒõ≈°n√©m odesl√°n√≠ zobraz√≠ persistentn√≠ toast s ƒç√≠slem objedn√°vky a tlaƒç√≠tkem pro QR modal.
 */

const ACCOUNT_DOMESTIC = "19-3296360227/0100"; // zobraz√≠ se v modalu, pou≈æ√≠v√° se k vygenerov√°n√≠ IBAN pro QR

// Pomocn√©: z ƒçesk√©ho "prefix-account/bank" udƒõl√° IBAN CZxx... (pou≈æito pro QR SPD)
function computeIbanCheckDigits(countryCode, bban) {
  // p≈ôevod p√≠smen na ƒç√≠sla: A=10 ... Z=35
  const countryNums = countryCode
    .split("")
    .map((c) => (c.charCodeAt(0) - 55).toString())
    .join("");
  const rearranged = bban + countryNums + "00";
  // pou≈æijeme BigInt pro velk√° ƒç√≠sla
  const remainder = BigInt(rearranged) % 97n;
  const check = 98n - remainder;
  return String(check).padStart(2, "0");
}

function domesticToIBAN(domestic) {
  // oƒçek√°v√° nap≈ô. "19-3296360227/0100"
  if (!domestic || typeof domestic !== "string") return "";
  const parts = domestic.split("/");
  if (parts.length !== 2) return "";
  const left = parts[0].replace(/\D/g, ""); // prefix + account, bez pomlƒçek
  const bank = parts[1].replace(/\D/g, "").padStart(4, "0").slice(-4);
  const accountPadded = left.padStart(16, "0").slice(-16);
  const bban = bank + accountPadded; // pro CZ: 4 + 16 = 20 znak≈Ø
  const check = computeIbanCheckDigits("CZ", bban);
  return `CZ${check}${bban}`;
}

export default function OrderForm() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    standardQuantity: "", // pr√°zdn√© pol√≠ƒçko (ne 0) - u≈æivatelsky p≈ô√≠jemnƒõj≈°√≠
    lowCholQuantity: "",
    pickupLocation: "",
    pickupDate: "", // DD.MM.YYYY
  });

  const [stock, setStock] = useState({ standardQuantity: 0, lowCholQuantity: 0 });
  const [loading, setLoading] = useState(false);
  const [dateError, setDateError] = useState("");
  const [showCalendar, setShowCalendar] = useState(false);
  const [showQR, setShowQR] = useState(false);
  const [lastOrder, setLastOrder] = useState(null);

  const calendarRef = useRef(null);

  // cena
  const totalPrice =
    (parseInt(formData.standardQuantity || 0, 10) * 5 || 0) +
    (parseInt(formData.lowCholQuantity || 0, 10) * 7 || 0);

  // dne≈°ek (00:00)
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const getDateOffset = (offset) => {
    const d = new Date();
    d.setDate(d.getDate() + offset);
    d.setHours(0, 0, 0, 0);
    return d;
  };

  const formatDateCZ = (date) => {
    if (!date) return "";
    const dd = String(date.getDate()).padStart(2, "0");
    const mm = String(date.getMonth() + 1).padStart(2, "0");
    const yyyy = date.getFullYear();
    return `${dd}.${mm}.${yyyy}`;
  };

  const parseDateFromCZ = (cz) => {
    // "DD.MM.YYYY" -> Date
    if (!cz) return null;
    const [dd, mm, yyyy] = cz.split(".");
    if (!dd || !mm || !yyyy) return null;
    const d = new Date(`${yyyy}-${mm}-${dd}T00:00:00`);
    if (Number.isNaN(d.getTime())) return null;
    return d;
  };

  const isWeekend = (date) => date.getDay() === 0 || date.getDay() === 6;

  const isValidDate = (date, location = formData.pickupLocation) => {
    // date m≈Ø≈æe b√Ωt Date nebo string (pokud string, parse)
    let d = date instanceof Date ? new Date(date) : parseDateFromCZ(date);
    if (!d) return false;
    d.setHours(0, 0, 0, 0);
    if (d <= today) return false; // dnes i minulost zak√°z√°no
    if (location === "Dematic Ostrov u St≈ô√≠bra 65" && isWeekend(d)) return false;
    return true;
  };
    // naƒçten√≠ z√°sob ze serveru
 useEffect(() => {
  async function fetchStock() {
    try {
      const response = await fetch("/api/stock");
      const data = await response.json();

      console.log("üì¶ Naƒçten√Ω stock:", data);

      setStock({
        standardQuantity: data.standard_quantity ?? 0,
        lowCholQuantity: data.low_chol_quantity ?? 0,
        standardPrice: data.standard_price ?? 0,
        lowCholPrice: data.low_chol_price ?? 0,
      });
    } catch (error) {
      console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ z√°sob:", error);
      toast.error("Nepoda≈ôilo se naƒç√≠st stav z√°sob");
    }
  }

  fetchStock();
}, []);
    return () => { mounted = false; };
  }, []);

  // zmƒõna formul√°≈ôe
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]:
        name === "standardQuantity" || name === "lowCholQuantity"
          ? value === ""
            ? ""
            : parseInt(value, 10)
          : value,
    }));
  };

  // p≈ôid√°n√≠ k poƒçtu
  const handleAdd = (field, amount) => {
    setFormData((prev) => {
      const cur = parseInt(prev[field] || 0, 10);
      return { ...prev, [field]: Math.max(0, cur + amount) };
    });
  };

  const clearDateAndSetError = (msg) => {
    setFormData((prev) => ({ ...prev, pickupDate: "" }));
    setDateError(msg || "");
  };

  const handlePickupSelect = (loc) => {
    setFormData((prev) => ({ ...prev, pickupLocation: loc }));
    if (formData.pickupDate) {
      const parsed = parseDateFromCZ(formData.pickupDate);
      if (!isValidDate(parsed, loc)) {
        if (loc === "Dematic Ostrov u St≈ô√≠bra 65") {
          clearDateAndSetError("‚ùå Nelze vybrat dne≈°n√≠ den nebo v√≠kend pro Dematic.");
        } else {
          clearDateAndSetError("‚ùå Nelze vybrat dne≈°n√≠ den.");
        }
      } else {
        setDateError("");
      }
    } else {
      setDateError("");
    }
  };

  const handleDateSelect = (date) => {
    if (!date) return;
    const d = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    if (!isValidDate(d)) {
      if (formData.pickupLocation === "Dematic Ostrov u St≈ô√≠bra 65") {
        clearDateAndSetError("‚ùå Nelze vybrat dne≈°n√≠ den nebo v√≠kend pro Dematic.");
      } else {
        clearDateAndSetError("‚ùå Nelze vybrat dne≈°n√≠ den.");
      }
      return;
    }
    setFormData((prev) => ({ ...prev, pickupDate: formatDateCZ(d) }));
    setDateError("");
    setShowCalendar(false);
  };

  const handleDateQuickPick = (offset) => {
    const d = getDateOffset(offset);
    if (!isValidDate(d)) {
      if (formData.pickupLocation === "Dematic Ostrov u St≈ô√≠bra 65") {
        clearDateAndSetError("‚ùå Nelze vybrat dne≈°n√≠ den nebo v√≠kend pro Dematic.");
      } else {
        clearDateAndSetError("‚ùå Nelze vybrat dne≈°n√≠ den.");
      }
    } else {
      setFormData((prev) => ({ ...prev, pickupDate: formatDateCZ(d) }));
      setDateError("");
    }
    setShowCalendar(false);
  };
    const handleSubmit = async (e) => {
    e.preventDefault();
    const standardQty = parseInt(formData.standardQuantity || 0, 10);
    const lowCholQty = parseInt(formData.lowCholQuantity || 0, 10);
    const totalEggs = standardQty + lowCholQty;

    // validace minim√°ln√≠ objedn√°vky
    if (totalEggs < 10 || totalEggs % 10 !== 0) {
      toast.error("‚ùå Minim√°ln√≠ objedn√°vka je 10 ks a v≈ædy jen n√°sobky 10.");
      return;
    }

    // validace povinn√Ωch pol√≠
    if (!formData.name || !formData.pickupLocation || !formData.pickupDate) {
      toast.error("‚ùå Vypl≈àte v≈°echna povinn√° pole.");
      return;
    }

    const parsed = parseDateFromCZ(formData.pickupDate);
    if (!isValidDate(parsed, formData.pickupLocation)) {
      toast.error("‚ùå Vybran√© datum nen√≠ platn√© pro zvolen√© m√≠sto vyzvednut√≠.");
      return;
    }

    setLoading(true);

    try {
      const res = await fetch("/api/order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ...formData,
          standardQuantity: standardQty,
          lowCholQuantity: lowCholQty,
        }),
      });
      const data = await res.json();

      if (data.success) {
        setLastOrder({ orderId: data.orderId, price: totalPrice });
        setShowQR(true);

        toast.custom(
          (t) => (
            <div
              className={`bg-white shadow-lg rounded-2xl p-5 max-w-md w-full relative ${
                t.visible ? "animate-enter" : "animate-leave"
              }`}
            >
              <button
                onClick={() => toast.dismiss(t.id)}
                className="absolute top-3 right-3 text-gray-500 hover:text-gray-800"
              >
                <X size={18} />
              </button>
              <h3 className="text-lg font-bold mb-2">‚úÖ Objedn√°vka byla √∫spƒõ≈°nƒõ odesl√°na</h3>
              <p className="mb-1">ƒå√≠slo objedn√°vky: <strong>{data.orderId}</strong></p>
              <p className="mb-3">Celkov√° cena: <strong>{totalPrice} Kƒç</strong></p>
            </div>
          ),
          { duration: Infinity }
        );

        // aktualizace z√°sob podle response
        setStock((prev) => ({
          ...prev,
          standardQuantity: data.remaining?.standard ?? prev.standardQuantity,
          lowCholQuantity: data.remaining?.lowChol ?? prev.lowCholQuantity,
        }));

        // reset formul√°≈ôe
        setFormData({
          name: "",
          email: "",
          phone: "",
          standardQuantity: "",
          lowCholQuantity: "",
          pickupLocation: "",
          pickupDate: "",
        });
        setDateError("");
      } else {
        toast.error("‚ùå Chyba: " + (data.error || "Nepoda≈ôilo se odeslat objedn√°vku."));
      }
    } catch (err) {
      console.error("Order submit error:", err);
      toast.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ objedn√°vky.");
    } finally {
      setLoading(false);
    }
  };

  const getQrValue = () => {
    if (!lastOrder) return "";
    const iban = domesticToIBAN(ACCOUNT_DOMESTIC);
    const amount = Number(lastOrder.price || 0).toFixed(2);
    return `SPD*1.0*ACC:${iban}*AM:${amount}*CC:CZK*X-VS:${lastOrder.orderId}`;
  };

  const disabledFn = (date) => {
    const d = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    if (d <= today) return true;
    if (formData.pickupLocation === "Dematic Ostrov u St≈ô√≠bra 65") {
      const day = d.getDay();
      if (day === 0 || day === 6) return true;
    }
    return false;
  };
  return (
    <div className="max-w-lg mx-auto p-4">
      <Toaster position="top-center" />

      {/* === QR MODAL === */}
      {showQR && lastOrder && (
        <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50 px-4">
          <div className="bg-white p-5 rounded-2xl shadow-xl relative w-full max-w-sm">
            <button
              onClick={() => setShowQR(false)}
              className="absolute top-3 right-3 text-gray-500 hover:text-gray-800"
            >
              <X size={20} />
            </button>
            <h3 className="text-lg font-bold mb-2">Platba p≈ôes QR k√≥d</h3>
            <div className="flex justify-center mb-3">
              <QRCodeCanvas
                value={getQrValue()}
                size={200}
                includeMargin={true}
              />
            </div>
            <div className="mt-3 text-right">
              <button
                onClick={() => setShowQR(false)}
                className="px-3 py-1 bg-yellow-400 rounded hover:bg-yellow-500"
              >
                Zav≈ô√≠t
              </button>
            </div>
          </div>
        </div>
      )}

      {/* === STAV Z√ÅSOB === */}
      <div className="mb-4 text-lg text-gray-700">
        <h2 className="font-bold mb-1 text-red-600">Aktu√°ln√≠ dostupn√© mno≈æstv√≠</h2>
        <p>
          ü•ö Standardn√≠ vejce:{" "}
          <strong>{stock.standardQuantity}</strong> ks (
          {stock.standardPrice} Kƒç/ks)
        </p>
        <p>
          ü•ö Vejce se sn√≠≈æen√Ωm cholesterolem:{" "}
          <strong>{stock.lowCholQuantity}</strong> ks (
          {stock.lowCholPrice} Kƒç/ks)
        </p>
      </div>

      {/* === FORMUL√Å≈ò === */}
      <form
        onSubmit={handleSubmit}
        className="bg-white shadow-lg rounded-2xl p-6 space-y-4"
      >
        {/* Jm√©no */}
        <div>
          <label className="block text-gray-700 mb-1">
            Jm√©no a p≈ô√≠jmen√≠ *
          </label>
          <input
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
            placeholder="Zadejte cel√© jm√©no"
            className="w-full border rounded-xl p-2"
          />
        </div>

        {/* Email */}
        <div>
          <label className="block text-gray-700 mb-1">Email</label>
          <input
            name="email"
            value={formData.email}
            onChange={handleChange}
            type="email"
            placeholder="nap≈ô. jan.novak@email.cz"
            className="w-full border rounded-xl p-2"
          />
        </div>

        {/* Telefon */}
        <div>
          <label className="block text-gray-700 mb-1">Telefon</label>
          <input
            name="phone"
            value={formData.phone}
            onChange={handleChange}
            type="tel"
            placeholder="+420 123 456 789"
            className="w-full border rounded-xl p-2"
          />
        </div>

        {/* Poƒçet standardn√≠ch vajec */}
        <div>
          <label className="block text-gray-700 mb-1">
            Poƒçet standardn√≠ch vajec
          </label>
          <div className="flex gap-2 items-center">
            <input
              type="number"
              name="standardQuantity"
              value={formData.standardQuantity}
              onChange={handleChange}
              min="0"
              placeholder="0"
              className="w-full border rounded-xl p-2"
            />
            <button
              type="button"
              onClick={() => handleAdd("standardQuantity", 5)}
              className="bg-yellow-400 px-3 py-1 rounded-lg hover:bg-yellow-500"
            >
              +5
            </button>
            <button
              type="button"
              onClick={() => handleAdd("standardQuantity", 10)}
              className="bg-yellow-400 px-3 py-1 rounded-lg hover:bg-yellow-500"
            >
              +10
            </button>
          </div>
        </div>

        {/* Poƒçet vajec se sn√≠≈æen√Ωm cholesterolem */}
        <div>
          <label className="block text-gray-700 mb-1">
            Poƒçet vajec se sn√≠≈æen√Ωm cholesterolem
          </label>
          <div className="flex gap-2 items-center">
            <input
              type="number"
              name="lowCholQuantity"
              value={formData.lowCholQuantity}
              onChange={handleChange}
              min="0"
              placeholder="0"
              className="w-full border rounded-xl p-2"
            />
            <button
              type="button"
              onClick={() => handleAdd("lowCholQuantity", 5)}
              className="bg-yellow-400 px-3 py-1 rounded-lg hover:bg-yellow-500"
            >
              +5
            </button>
            <button
              type="button"
              onClick={() => handleAdd("lowCholQuantity", 10)}
              className="bg-yellow-400 px-3 py-1 rounded-lg hover:bg-yellow-500"
            >
              +10
            </button>
          </div>
        </div>

        {/* CELKOV√Å CENA */}
        <div className="text-gray-800 font-semibold">
          Celkov√° cena:{" "}
          <span className="text-green-700">{totalPrice} Kƒç</span>
        </div>

        {/* M√çSTO VYZVEDNUT√ç */}
        <div>
          <label className="block text-gray-700 mb-1">
            M√≠sto vyzvednut√≠ *
          </label>
          <div className="flex flex-wrap gap-2">
            {["Dematic Ostrov u St≈ô√≠bra 65", "Honezovice"].map((loc) => (
              <button
                key={loc}
                type="button"
                onClick={() => handlePickupSelect(loc)}
                className={`px-4 py-2 rounded-xl font-semibold shadow-md ${
                  formData.pickupLocation === loc
                    ? "bg-green-500 text-white"
                    : "bg-yellow-400 text-gray-900 hover:bg-yellow-500"
                }`}
              >
                {loc}
              </button>
            ))}
          </div>
        </div>

        {/* DATUM VYZVEDNUT√ç */}
        <div>
          <label className="block text-gray-700 mb-1">
            Datum vyzvednut√≠ *
          </label>
          <input
            type="text"
            name="pickupDate"
            value={formData.pickupDate}
            onFocus={() => setShowCalendar(true)}
            readOnly
            placeholder="DD.MM.YYYY"
            className={`w-full border rounded-xl p-2 ${
              dateError ? "border-red-500" : ""
            }`}
          />
          {dateError && (
            <p className="text-red-600 text-sm mt-1">{dateError}</p>
          )}
          {showCalendar && (
            <div ref={calendarRef} className="mt-2">
              <DayPicker
                mode="single"
                selected={
                  formData.pickupDate
                    ? parseDateFromCZ(formData.pickupDate)
                    : undefined
                }
                onSelect={handleDateSelect}
                disabled={disabledFn}
                weekStartsOn={1}
              />
            </div>
          )}
          <div className="flex gap-2 mt-2">
            <button
              type="button"
              onClick={() => handleDateQuickPick(1)}
              className="bg-yellow-400 px-3 py-1 rounded-lg hover:bg-yellow-500"
            >
              Z√≠tra
            </button>
            <button
              type="button"
              onClick={() => handleDateQuickPick(2)}
              className="bg-yellow-400 px-3 py-1 rounded-lg hover:bg-yellow-500"
            >
              Poz√≠t≈ô√≠
            </button>
          </div>
        </div>

        {/* ODESLAT */}
        <div>
          <button
            type="submit"
            disabled={loading}
            className="bg-yellow-400 w-full px-6 py-3 rounded-xl font-semibold shadow-md hover:bg-yellow-500 hover:scale-105 transform transition"
          >
            {loading ? "Odes√≠l√°m..." : "Odeslat objedn√°vku"}
          </button>
        </div>
      </form>
    </div>
  );
}
